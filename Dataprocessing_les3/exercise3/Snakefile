# -*- python -*-
from os.path import join

"""
This is a simple pipeline that maps the reads of a genome.
It uses multipel reads to mapped agains a genome.file
Input:
      * sample files
      * genome
Output:
      * html file

"""

SAMPLES = ["A", "B", "C"]
wdir = "/data/"
FASTQ_DIR = "samples/"

"""
Runs pipeline
"""
rule all:
    input:
        "out.html"
    message: "final report in html"

"""
Uses the bwa mem to great bam files of the input files.
BWA is a software package for mapping low-divergent sequences against a large reference genome.
"""
rule bwa_map:
    input:
        genome = join(wdir , "genome.fa"),
        fastq1 = join(wdir, FASTQ_DIR, "{sample}.fastq")
    output:
        "mapped_reads/{sample}.bam"
    message: "executing bwa mem on the following {input} to generate the following {output}"
    shell:
        "bwa mem {input} | samtools view -Sb - > {output}"

"""
The Samtool sort is used to sort the output bam files.
Sort alignments by leftmost coordinates, or by read name when -n is used.
"""
rule samtools_sort:
    input:
        "mapped_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam"
    message: "sorted mapped reads in new diractory "
    shell:
        "samtools sort -T sorted_reads/{wildcards.sample} "
        "-O bam {input} > {output}"

"""
change the bam files to bam.bai
and index the sorted reads.
"""
rule samtools_index:
    input:
        "sorted_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam.bai"
    message : "Index the sorted reads"
    shell:
        "samtools index {input}"

"""
Here samtools uses mpileups to generate text pileup output for one or multiple BAM files. Each input file produces a separate group of pileup columns in the output.
"""
rule bcftools_call:
    input:
        fa="data/genome.fa",
        bam=expand("sorted_reads/{sample}.bam", sample=SAMPLES),
        bai=expand("sorted_reads/{sample}.bam.bai", sample=SAMPLES)
    output:
        "calls/all.vcf"
    message: "uses bfc tool to aggregate the mapped reads "
    shell:
        "samtools mpileup -g -f {input.fa} {input.bam} | "
        "bcftools call -mv - > {output}"

"""
Create a report for the all.vcf in te form of a html page.
"""
rule report:
    input:
        "calls/all.vcf"
    output:
        "out.html"
    message: "makes a html report of the workflow"
    run:
        from snakemake.utils import report
        with open(input[0]) as f:
            n_calls = sum(1 for line in f if not line.startswith("#"))

        report("""
        An example workflow
        ===================================
        Reads were mapped to the Yeas reference genome
        and variants were called jointly with
        SAMtools/BCFtools.
        This resulted in {n_calls} variants (see Table T1_).
        """, output[0], metadata="Author: Mr Pipeline", T1=input[0])
